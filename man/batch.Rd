% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes.R
\name{batch}
\alias{batch}
\title{Batch class for managing chat processing}
\usage{
batch(
  prompts = list(),
  responses = list(),
  completed = integer(0),
  state_path = character(0),
  type_spec = NULL,
  echo = character(0),
  input_type = character(0),
  max_retries = integer(0),
  initial_delay = integer(0),
  max_delay = integer(0),
  backoff_factor = integer(0),
  chunk_size = integer(0),
  workers = integer(0),
  plan = character(0),
  state = list()
)
}
\arguments{
\item{prompts}{List of prompts to process}

\item{responses}{List to store responses}

\item{completed}{Integer indicating number of completed prompts}

\item{state_path}{Path to save state file}

\item{type_spec}{Type specification for structured data extraction}

\item{echo}{Level of output to display ("none", "text", "all")}

\item{input_type}{Type of input ("vector" or "list")}

\item{max_retries}{Maximum number of retry attempts}

\item{initial_delay}{Initial delay before first retry}

\item{max_delay}{Maximum delay between retries}

\item{backoff_factor}{Factor to multiply delay by after each retry}

\item{chunk_size}{Size of chunks for parallel processing}

\item{workers}{Number of parallel workers}

\item{plan}{Parallel backend plan}

\item{state}{Internal state tracking}
}
\value{
Returns an S7 class object of class "batch" that represents a collection of prompts and their responses from chat models. The object contains all input parameters as properties and provides methods for:
\itemize{
\item Extracting text responses via \code{texts()}
\item Accessing full chat objects via \code{chats()}
\item Tracking processing progress via \code{progress()}
\item Extracting structured data via \code{structured_data()} when a type specification is provided
}
The batch object manages prompt processing, tracks completion status, and handles retries for failed requests.
}
\description{
Batch class for managing chat processing
}
\examples{
\dontshow{if (ellmer::has_credentials("openai")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Create a chat processor
chat <- chat_sequential(chat_openai())

# Process a batch of prompts
batch <- chat$batch(list(
  "What is R?",
  "Explain base R versus tidyverse",
  "Explain vectors, lists, and data frames"
))

# Check the progress if interrupted
batch$progress()

# Return the responses as a vector or list
batch$texts()

# Return the chat objects
batch$chats()
\dontshow{\}) # examplesIf}
}
