% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hellmer.R
\name{chat_future}
\alias{chat_future}
\title{Process a batch of prompts in parallel}
\usage{
chat_future(chat_model = NULL, ...)
}
\arguments{
\item{chat_model}{ellmer chat model object or function (e.g., \code{ellmer::chat_openai})}

\item{...}{Additional arguments passed to the underlying chat model (e.g., \code{system_prompt})}
}
\value{
A batch object (S7 class) containing:
\itemize{
\item \strong{prompts}: Original input prompts
\item \strong{responses}: Raw response data for completed prompts
\item \strong{completed}: Number of successfully processed prompts
\item \strong{state_path}: Path where batch state is saved
\item \strong{type_spec}: Type specification used for structured data
\item \strong{texts}: Function to extract text responses or structured data
\item \strong{chats}: Function to extract chat objects
\item \strong{progress}: Function to get processing status
\item \strong{batch}: Function to process a batch of prompts
}
}
\description{
Processes a batch of chat prompts using parallel workers.
Splits prompts into chunks for processing while maintaining state.
For sequential processing, use \code{chat_sequential()}.
}
\section{Batch Method}{

\preformatted{
batch(
  prompts,
  type_spec = NULL,
  judgements = 0,
  state_path = tempfile("chat_", fileext = ".rds"),
  progress = TRUE,
  workers = NULL,
  plan = "multisession",
  chunk_size = NULL,
  max_chunk_attempts = 3L,
  max_retries = 3L,
  initial_delay = 20,
  max_delay = 80,
  backoff_factor = 2,
  beep = TRUE,
  echo = FALSE,
  ...
)
}

The batch method processes multiple prompts in parallel and returns a batch object:
\itemize{
\item \strong{prompts}: List of prompts to process
\item \strong{type_spec}: Type specification for structured data extraction
\item \strong{judgements}: Number of judgements (i.e., thinking or reasoning) for structured data refinement
\item \strong{state_path}: Path to save state file for resuming interrupted processing
\item \strong{progress}: Show progress bar
\item \strong{workers}: Number of parallel workers (default: CPU cores as the upper limit)
\item \strong{chunk_size}: Number of prompts each worker processes at a time (default: CPU cores * 5)
\item \strong{max_chunk_attempts}: Maximum retries per failed chunk
\item \strong{max_retries}: Maximum number of retry attempts for failed requests
\item \strong{initial_delay}: Initial delay before first retry in seconds
\item \strong{max_delay}: Maximum delay between retries in seconds
\item \strong{backoff_factor}: Factor to multiply delay by after each retry
\item \strong{beep}: Whether to play a sound on completion
\item \strong{echo}: Whether to display chat outputs (when \code{progress} is \code{FALSE})
\item \strong{...}: Additional arguments passed to the chat method
}
}

\examples{
\dontshow{if (ellmer::has_credentials("openai")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Create a parallel chat processor with an object
chat <- chat_future(chat_openai(system_prompt = "Reply concisely"))

# Or a function
chat <- chat_future(chat_openai, system_prompt = "Reply concisely, one sentence")

# Process a batch of prompts in parallel
batch <- chat$batch(
  list(
    "What is R?",
    "Explain base R versus tidyverse",
    "Explain vectors, lists, and data frames"
  ),
  chunk_size = 3
)

# Process batch with echo enabled (when progress is disabled)
batch <- chat$batch(
  list(
    "What is R?",
    "Explain base R versus tidyverse"
  ),
  progress = FALSE, 
  echo = TRUE
)

# Check the progress if interrupted
batch$progress()

# Return the responses
batch$texts()

# Return the chat objects
batch$chats()
\dontshow{\}) # examplesIf}
}
