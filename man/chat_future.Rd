% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hellmer.R
\name{chat_future}
\alias{chat_future}
\title{Process a batch of prompts in parallel}
\usage{
chat_future(chat_model = NULL, ...)
}
\arguments{
\item{chat_model}{ellmer chat model object or function (e.g., \code{ellmer::chat_openai})}

\item{...}{Additional arguments passed to the underlying chat model (e.g., \code{system_prompt})}
}
\value{
A batch object (S7 class) containing:
\itemize{
\item prompts: Original input prompts
\item responses: Raw response data for completed prompts
\item completed: Number of successfully processed prompts
\item state_path: Path where batch state is saved
\item type_spec: Type specification used for structured data
\item texts: Function to extract text responses (includes structured data when \code{type_spec} is provided)
\item chats: Function to extract chat objects
\item progress: Function to get processing status
\item batch: Function to process a batch of prompts
}
}
\description{
Processes a batch of chat prompts using parallel workers.
Splits prompts into chunks for processing while maintaining state.
For sequential processing, use \code{chat_sequential()}.
}
\section{Batch Method}{

batch(
prompts,
type_spec = NULL,
judgements = 0,
state_path = tempfile("chat_", fileext = ".rds"),
progress = TRUE,
workers = parallel::detectCores(),
plan = "multisession",
chunk_size = NULL,
max_chunk_attempts = 3L,
max_retries = 3L,
initial_delay = 20,
max_delay = 80,
backoff_factor = 2,
beep = TRUE,
echo = FALSE,
...
)

The batch method processes multiple prompts in parallel and returns a batch object:
\itemize{
\item prompts: List of prompts to process
\item type_spec: Type specification for structured data extraction
\item judgements: Number of judgements for data extraction accuracy
\item state_path: Path to save state file for resuming interrupted processing
\item progress: Whether to show progress bars (default: \code{TRUE})
\item workers: Number of parallel workers
\item plan: Parallel backend plan ("multisession" or "multicore")
\item chunk_size: Size of chunks for parallel processing
\item max_chunk_attempts: Maximum retries per failed chunk
\item max_retries: Maximum number of retry attempts for failed requests
\item initial_delay: Initial delay before first retry in seconds
\item max_delay: Maximum delay between retries in seconds
\item backoff_factor: Factor to multiply delay by after each retry
\item beep: Whether to play a sound on completion
\item echo: Whether to display chat outputs (when \code{progress} is \code{FALSE})
\item ...: Additional arguments passed to the chat method
}
}

\examples{
\dontshow{if (ellmer::has_credentials("openai")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Create a parallel chat processor with an object
chat <- chat_future(chat_openai(system_prompt = "Reply concisely"))

# Or a function
chat <- chat_future(chat_openai, system_prompt = "Reply concisely, one sentence")

# Process a batch of prompts in parallel
batch <- chat$batch(
  list(
    "What is R?",
    "Explain base R versus tidyverse",
    "Explain vectors, lists, and data frames"
  ),
  chunk_size = 3
)

# Process batch with echo enabled (when progress is disabled)
batch <- chat$batch(
  list(
    "What is R?",
    "Explain base R versus tidyverse"
  ),
  progress = FALSE, 
  echo = TRUE
)

# Check the progress if interrupted
batch$progress()

# Return the responses
batch$texts()

# Return the chat objects
batch$chats()
\dontshow{\}) # examplesIf}
}
